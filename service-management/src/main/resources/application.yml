server:
  port: 8088

spring:
  application:
    name: service-management
  profiles:
    active: dev
  eureka:
    client:
      service-url:
        defaultZone: http://localhost:8761/eureka/
      register-with-eureka: true
      fetch-registry: true
    instance:
      prefer-ip-address: true
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  datasource:
    url: jdbc:postgresql://localhost:5433/postgres?currentSchema=service_management&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
  sql:
    init:
      platform: postgres
      mode: ALWAYS
      schema-locations: classpath:db.sql

# Kafka Configuration
kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

# Kafka Producer Configuration
kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

# Kafka Consumer Configuration
kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  payment-consumer-group-id: service-payment-topic-consumer
  booking-consumer-group-id: service-booking-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

# Kafka Topics Configuration
kafka:
  topic:
    service-order-request: service-order-request
    service-order-response: service-order-response
    service-payment-request: service-payment-request
    service-payment-response: service-payment-response
    service-notification: service-notification
  group-id: service-management-group

# Service URLs for Feign clients
payment:
  service:
    url: http://localhost:8092

customer:
  service:
    url: http://localhost:8093

notification:
  service:
    url: http://localhost:8091

booking:
  service:
    url: http://localhost:8085

# Feign client configuration
feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 10000
        loggerLevel: full

# OpenAPI Configuration
openapi:
  service:
    api-docs: service-management-docs
    title: Service Management API
    version: 1.0.0
    server: http://localhost:8088

# Logging configuration
logging:
  level:
    com.poly.servicemanagement: DEBUG
    feign: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.kafka: DEBUG
    org.apache.kafka: DEBUG
