server:
  port: 8099

spring:
  application:
    name: customer-management

  eureka:
    client:
      service-url:
        defaultZone: ${EUREKA:http://localhost:8761/}
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect

  sql:
    init:
      mode: always
      schema-locations: classpath:init-schema.sql

  datasource:
    url: ${DBMS_CONNECTION:jdbc:mysql://localhost:3306/customer_management}
    username: ${DBMS_USERNAME:root}
    password: ${DBMS_PASSWORD:root}
kafka-config:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka-1:9092,kafka-2:9092,kafka-3:9092}
  schema-registry-url-key: schema.registry.url
  schema-registry-url: ${KAFKA_SCHEMA_REGISTRY_URL:http://schema-registry:8081}
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer

  deposit-consumer-group-id: deposit-topic-consumer
  room-consumer-group-id: booking-room-topic-consumer
  customer-group-id: customer-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150