package com.poly.customerdomain.model.entity.customer;

import com.poly.customerdomain.model.entity.Customer;
import com.poly.customerdomain.model.exception.*;
import com.poly.customerdomain.model.valueobject.*;
import com.poly.domain.valueobject.Money;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

public class CustomerCreateTest {

    @Test
    void shouldCreateCustomerWithAutoGeneratedId() {
        BehaviorData behavior = new BehaviorData(
                List.of("Deluxe"),
                List.of("SPA", "BREAKFAST")
        );
        Customer customer = Customer.builder()
                .userId(UUID.randomUUID())
                .name(new Name("Nguyen Van A"))
                .address(new Address("12 Lê Lợi", "Phường 4", "Quận 10", "TP.HCM"))
                .dateOfBirth(new DateOfBirth(LocalDate.of(1980, 1, 1)))
                .nationality(new Nationality("Vietnam"))
                .customerType(CustomerType.regular())
                .accumulatedSpending(new Money(BigDecimal.TEN))
                .level(Level.Gold)
                .behaviorData(behavior)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
        assertNotNull(customer.getId());
        System.out.println(customer.getDateOfBirth().toString());
        assertEquals("Nguyen Van A", customer.getName().getFullName());
    }

    @Test
    void shouldThrowExceptionWhenNameIsBlank() {
        // Act & Assert
        BlankCustomerNameException exception = assertThrows(
                BlankCustomerNameException.class,
                () -> new Name("") // code throw exception
        );
        // Optionally: Check context notice error
        assertEquals("Tên khách hàng không được để trống hoặc chỉ chứa khoảng trắng.", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenNameIsNull() {
        // Act & Assert
        BlankCustomerNameException exception = assertThrows(
                BlankCustomerNameException.class,
                () -> new Name(null) // code throw exception
        );
        // Optionally: Check context notice error
        assertEquals("Tên khách hàng không được để trống hoặc chỉ chứa khoảng trắng.", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenNameIsTooShort() {
        // Act & Assert
        CustomerNameLengthOutOfRangeException exception = assertThrows(
                CustomerNameLengthOutOfRangeException.class,
                () -> new Name("Nguy")
        );
        // Optionally: Check context notice error
        assertEquals("Tên khách hàng phải có độ dài từ 5 đến 100 ký tự.", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenNameIsTooLong() {
        // Arrange
        String tooLongName = "a".repeat(101);
        // Act & Assert
        CustomerNameLengthOutOfRangeException exception = assertThrows(
                CustomerNameLengthOutOfRangeException.class,
                () -> new Name(tooLongName)
        );
        // Optionally: Check context notice error
        assertEquals("Tên khách hàng phải có độ dài từ 5 đến 100 ký tự.", exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenAddressIsTooShort() {
        // Act & Assert
        CustomerAddressLengthOutOfRangeException exception = assertThrows(
                CustomerAddressLengthOutOfRangeException.class,
                () -> new Address("test", "test", "test", "test")
        );
        // Optionally: Check context notice error
        assertEquals("Địa chỉ khách hàng phải có độ dài từ 5 đến 100 ký tự.",  exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenAddressIsTooLong() {
        // Arrange
        String addressToLong = "a".repeat(101);
        // Act & Assert
        CustomerAddressLengthOutOfRangeException exception = assertThrows(
                CustomerAddressLengthOutOfRangeException.class,
                () -> new Address(addressToLong, "test", "test", "test")
        );
        // Optionally: Check context notice error
        assertEquals("Địa chỉ khách hàng phải có độ dài từ 5 đến 100 ký tự.",  exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenBirthTooLong() {
        // Act & Assert
        CustomerAgeOutOfRangeException exception = assertThrows(
                CustomerAgeOutOfRangeException.class,
                () -> new DateOfBirth(LocalDate.of(1080, 1, 1))
        );
        // Optionally: Check context notice error
        assertEquals("Tuổi phải nằm trong khoảng từ 15 đến 100.",  exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenBirthTooShort() {
        // Act & Assert
        CustomerAgeOutOfRangeException exception = assertThrows(
                CustomerAgeOutOfRangeException.class,
                () -> new DateOfBirth(LocalDate.of(2020, 1, 1))
        );
        // Optionally: Check context notice error
        assertEquals("Tuổi phải nằm trong khoảng từ 15 đến 100.",  exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenNationalityTooShort() {
        // Action
        CustomerNationalityOutOfRangeException exception = assertThrows(
                CustomerNationalityOutOfRangeException.class,
                () -> new Nationality("V")
        );
        // Optionally: Check context notice error
        assertEquals("Quốc gia của khách hàng phải nằm trong khoảng từ 2 đến 20 ký tự.",  exception.getMessage());
    }

    @Test
     void shouldThrowExceptionWhenNationalityTooLong() {
        //Data
        String dataError = "a".repeat(22);
        // Action
        CustomerNationalityOutOfRangeException exception = assertThrows(
                CustomerNationalityOutOfRangeException.class,
                () -> new Nationality(dataError)
        );
        // Optionally: Check context notice error
        assertEquals("Quốc gia của khách hàng phải nằm trong khoảng từ 2 đến 20 ký tự.",  exception.getMessage());
    }

    @Test
    void shouldThrowExceptionWhenCustomerTypeWrong() {
        // Action
        CustomerNationalityOutOfRangeException exception = assertThrows(
                CustomerNationalityOutOfRangeException.class,
                () -> CustomerType.regular()
        );
        // Optionally: Check context notice error
        assertEquals("Quốc gia của khách hàng phải nằm trong khoảng từ 2 đến 20 ký tự.",  exception.getMessage());
    }
}
