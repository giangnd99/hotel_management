/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package service.management.message;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ServicePaymentResponseMessageAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6488366912736037815L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ServicePaymentResponseMessageAvro\",\"namespace\":\"service.management.message\",\"fields\":[{\"name\":\"orderId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orderNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"paymentId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"currency\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"processedAt\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ServicePaymentResponseMessageAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ServicePaymentResponseMessageAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ServicePaymentResponseMessageAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ServicePaymentResponseMessageAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ServicePaymentResponseMessageAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ServicePaymentResponseMessageAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ServicePaymentResponseMessageAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ServicePaymentResponseMessageAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ServicePaymentResponseMessageAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String orderId;
  private java.lang.String orderNumber;
  private java.lang.String paymentId;
  private java.lang.String status;
  private java.lang.String amount;
  private java.lang.String currency;
  private java.lang.String message;
  private java.lang.String processedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ServicePaymentResponseMessageAvro() {}

  /**
   * All-args constructor.
   * @param orderId The new value for orderId
   * @param orderNumber The new value for orderNumber
   * @param paymentId The new value for paymentId
   * @param status The new value for status
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param message The new value for message
   * @param processedAt The new value for processedAt
   */
  public ServicePaymentResponseMessageAvro(java.lang.String orderId, java.lang.String orderNumber, java.lang.String paymentId, java.lang.String status, java.lang.String amount, java.lang.String currency, java.lang.String message, java.lang.String processedAt) {
    this.orderId = orderId;
    this.orderNumber = orderNumber;
    this.paymentId = paymentId;
    this.status = status;
    this.amount = amount;
    this.currency = currency;
    this.message = message;
    this.processedAt = processedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return orderNumber;
    case 2: return paymentId;
    case 3: return status;
    case 4: return amount;
    case 5: return currency;
    case 6: return message;
    case 7: return processedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = value$ != null ? value$.toString() : null; break;
    case 1: orderNumber = value$ != null ? value$.toString() : null; break;
    case 2: paymentId = value$ != null ? value$.toString() : null; break;
    case 3: status = value$ != null ? value$.toString() : null; break;
    case 4: amount = value$ != null ? value$.toString() : null; break;
    case 5: currency = value$ != null ? value$.toString() : null; break;
    case 6: message = value$ != null ? value$.toString() : null; break;
    case 7: processedAt = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.String getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.String value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'orderNumber' field.
   * @return The value of the 'orderNumber' field.
   */
  public java.lang.String getOrderNumber() {
    return orderNumber;
  }


  /**
   * Sets the value of the 'orderNumber' field.
   * @param value the value to set.
   */
  public void setOrderNumber(java.lang.String value) {
    this.orderNumber = value;
  }

  /**
   * Gets the value of the 'paymentId' field.
   * @return The value of the 'paymentId' field.
   */
  public java.lang.String getPaymentId() {
    return paymentId;
  }


  /**
   * Sets the value of the 'paymentId' field.
   * @param value the value to set.
   */
  public void setPaymentId(java.lang.String value) {
    this.paymentId = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.String getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.String value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'processedAt' field.
   * @return The value of the 'processedAt' field.
   */
  public java.lang.String getProcessedAt() {
    return processedAt;
  }


  /**
   * Sets the value of the 'processedAt' field.
   * @param value the value to set.
   */
  public void setProcessedAt(java.lang.String value) {
    this.processedAt = value;
  }

  /**
   * Creates a new ServicePaymentResponseMessageAvro RecordBuilder.
   * @return A new ServicePaymentResponseMessageAvro RecordBuilder
   */
  public static service.management.message.ServicePaymentResponseMessageAvro.Builder newBuilder() {
    return new service.management.message.ServicePaymentResponseMessageAvro.Builder();
  }

  /**
   * Creates a new ServicePaymentResponseMessageAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ServicePaymentResponseMessageAvro RecordBuilder
   */
  public static service.management.message.ServicePaymentResponseMessageAvro.Builder newBuilder(service.management.message.ServicePaymentResponseMessageAvro.Builder other) {
    if (other == null) {
      return new service.management.message.ServicePaymentResponseMessageAvro.Builder();
    } else {
      return new service.management.message.ServicePaymentResponseMessageAvro.Builder(other);
    }
  }

  /**
   * Creates a new ServicePaymentResponseMessageAvro RecordBuilder by copying an existing ServicePaymentResponseMessageAvro instance.
   * @param other The existing instance to copy.
   * @return A new ServicePaymentResponseMessageAvro RecordBuilder
   */
  public static service.management.message.ServicePaymentResponseMessageAvro.Builder newBuilder(service.management.message.ServicePaymentResponseMessageAvro other) {
    if (other == null) {
      return new service.management.message.ServicePaymentResponseMessageAvro.Builder();
    } else {
      return new service.management.message.ServicePaymentResponseMessageAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for ServicePaymentResponseMessageAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ServicePaymentResponseMessageAvro>
    implements org.apache.avro.data.RecordBuilder<ServicePaymentResponseMessageAvro> {

    private java.lang.String orderId;
    private java.lang.String orderNumber;
    private java.lang.String paymentId;
    private java.lang.String status;
    private java.lang.String amount;
    private java.lang.String currency;
    private java.lang.String message;
    private java.lang.String processedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(service.management.message.ServicePaymentResponseMessageAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[1].schema(), other.orderNumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[2].schema(), other.paymentId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.message)) {
        this.message = data().deepCopy(fields()[6].schema(), other.message);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.processedAt)) {
        this.processedAt = data().deepCopy(fields()[7].schema(), other.processedAt);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing ServicePaymentResponseMessageAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(service.management.message.ServicePaymentResponseMessageAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[1].schema(), other.orderNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[2].schema(), other.paymentId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currency)) {
        this.currency = data().deepCopy(fields()[5].schema(), other.currency);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.message)) {
        this.message = data().deepCopy(fields()[6].schema(), other.message);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.processedAt)) {
        this.processedAt = data().deepCopy(fields()[7].schema(), other.processedAt);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.String getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder setOrderId(java.lang.String value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderNumber' field.
      * @return The value.
      */
    public java.lang.String getOrderNumber() {
      return orderNumber;
    }


    /**
      * Sets the value of the 'orderNumber' field.
      * @param value The value of 'orderNumber'.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder setOrderNumber(java.lang.String value) {
      validate(fields()[1], value);
      this.orderNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderNumber' field has been set.
      * @return True if the 'orderNumber' field has been set, false otherwise.
      */
    public boolean hasOrderNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderNumber' field.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder clearOrderNumber() {
      orderNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentId' field.
      * @return The value.
      */
    public java.lang.String getPaymentId() {
      return paymentId;
    }


    /**
      * Sets the value of the 'paymentId' field.
      * @param value The value of 'paymentId'.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder setPaymentId(java.lang.String value) {
      validate(fields()[2], value);
      this.paymentId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentId' field has been set.
      * @return True if the 'paymentId' field has been set, false otherwise.
      */
    public boolean hasPaymentId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'paymentId' field.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder clearPaymentId() {
      paymentId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder setStatus(java.lang.String value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.String getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder setAmount(java.lang.String value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder setCurrency(java.lang.String value) {
      validate(fields()[5], value);
      this.currency = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder setMessage(java.lang.String value) {
      validate(fields()[6], value);
      this.message = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder clearMessage() {
      message = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'processedAt' field.
      * @return The value.
      */
    public java.lang.String getProcessedAt() {
      return processedAt;
    }


    /**
      * Sets the value of the 'processedAt' field.
      * @param value The value of 'processedAt'.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder setProcessedAt(java.lang.String value) {
      validate(fields()[7], value);
      this.processedAt = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'processedAt' field has been set.
      * @return True if the 'processedAt' field has been set, false otherwise.
      */
    public boolean hasProcessedAt() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'processedAt' field.
      * @return This builder.
      */
    public service.management.message.ServicePaymentResponseMessageAvro.Builder clearProcessedAt() {
      processedAt = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ServicePaymentResponseMessageAvro build() {
      try {
        ServicePaymentResponseMessageAvro record = new ServicePaymentResponseMessageAvro();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.String) defaultValue(fields()[0]);
        record.orderNumber = fieldSetFlags()[1] ? this.orderNumber : (java.lang.String) defaultValue(fields()[1]);
        record.paymentId = fieldSetFlags()[2] ? this.paymentId : (java.lang.String) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (java.lang.String) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.String) defaultValue(fields()[4]);
        record.currency = fieldSetFlags()[5] ? this.currency : (java.lang.String) defaultValue(fields()[5]);
        record.message = fieldSetFlags()[6] ? this.message : (java.lang.String) defaultValue(fields()[6]);
        record.processedAt = fieldSetFlags()[7] ? this.processedAt : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ServicePaymentResponseMessageAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ServicePaymentResponseMessageAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ServicePaymentResponseMessageAvro>
    READER$ = (org.apache.avro.io.DatumReader<ServicePaymentResponseMessageAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.orderId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.orderId);
    }

    if (this.orderNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.orderNumber);
    }

    if (this.paymentId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.paymentId);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    if (this.amount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.amount);
    }

    if (this.currency == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.currency);
    }

    if (this.message == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.message);
    }

    if (this.processedAt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.processedAt);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.orderId = null;
      } else {
        this.orderId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.orderNumber = null;
      } else {
        this.orderNumber = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.paymentId = null;
      } else {
        this.paymentId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.amount = null;
      } else {
        this.amount = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.currency = null;
      } else {
        this.currency = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.message = null;
      } else {
        this.message = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.processedAt = null;
      } else {
        this.processedAt = in.readString();
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.orderId = null;
          } else {
            this.orderId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.orderNumber = null;
          } else {
            this.orderNumber = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.paymentId = null;
          } else {
            this.paymentId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amount = null;
          } else {
            this.amount = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.currency = null;
          } else {
            this.currency = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.message = null;
          } else {
            this.message = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.processedAt = null;
          } else {
            this.processedAt = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










