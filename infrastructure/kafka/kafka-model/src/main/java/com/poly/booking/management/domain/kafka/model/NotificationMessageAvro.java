/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.poly.booking.management.domain.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class NotificationMessageAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4625062978742125073L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NotificationMessageAvro\",\"namespace\":\"com.poly.booking.management.domain.kafka.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique ID for the message, acting as correlationId\"},{\"name\":\"bookingId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"ID of the booking this notification is for\"},{\"name\":\"customerId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ID of the customer\",\"default\":null},{\"name\":\"customerEmail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Email address for sending the notification\",\"default\":null},{\"name\":\"qrCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"QR code data, can be null for requests\",\"default\":null},{\"name\":\"notificationType\",\"type\":{\"type\":\"enum\",\"name\":\"NotificationType\",\"symbols\":[\"BOOKING_CONFIRMATION\",\"CHECK_IN\",\"BOOKING_CANCEL\"]},\"doc\":\"Type of notification message\"},{\"name\":\"messageStatus\",\"type\":{\"type\":\"enum\",\"name\":\"MessageStatus\",\"symbols\":[\"SUCCESS\",\"FAILED\",\"PENDING\"]},\"doc\":\"Status of the message processing\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NotificationMessageAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NotificationMessageAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NotificationMessageAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NotificationMessageAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NotificationMessageAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NotificationMessageAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NotificationMessageAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NotificationMessageAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NotificationMessageAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique ID for the message, acting as correlationId */
  private java.lang.String id;
  /** ID of the booking this notification is for */
  private java.lang.String bookingId;
  /** ID of the customer */
  private java.lang.String customerId;
  /** Email address for sending the notification */
  private java.lang.String customerEmail;
  /** QR code data, can be null for requests */
  private java.lang.String qrCode;
  /** Type of notification message */
  private com.poly.booking.management.domain.kafka.model.NotificationType notificationType;
  /** Status of the message processing */
  private com.poly.booking.management.domain.kafka.model.MessageStatus messageStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NotificationMessageAvro() {}

  /**
   * All-args constructor.
   * @param id Unique ID for the message, acting as correlationId
   * @param bookingId ID of the booking this notification is for
   * @param customerId ID of the customer
   * @param customerEmail Email address for sending the notification
   * @param qrCode QR code data, can be null for requests
   * @param notificationType Type of notification message
   * @param messageStatus Status of the message processing
   */
  public NotificationMessageAvro(java.lang.String id, java.lang.String bookingId, java.lang.String customerId, java.lang.String customerEmail, java.lang.String qrCode, com.poly.booking.management.domain.kafka.model.NotificationType notificationType, com.poly.booking.management.domain.kafka.model.MessageStatus messageStatus) {
    this.id = id;
    this.bookingId = bookingId;
    this.customerId = customerId;
    this.customerEmail = customerEmail;
    this.qrCode = qrCode;
    this.notificationType = notificationType;
    this.messageStatus = messageStatus;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return bookingId;
    case 2: return customerId;
    case 3: return customerEmail;
    case 4: return qrCode;
    case 5: return notificationType;
    case 6: return messageStatus;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: bookingId = value$ != null ? value$.toString() : null; break;
    case 2: customerId = value$ != null ? value$.toString() : null; break;
    case 3: customerEmail = value$ != null ? value$.toString() : null; break;
    case 4: qrCode = value$ != null ? value$.toString() : null; break;
    case 5: notificationType = (com.poly.booking.management.domain.kafka.model.NotificationType)value$; break;
    case 6: messageStatus = (com.poly.booking.management.domain.kafka.model.MessageStatus)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Unique ID for the message, acting as correlationId
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Unique ID for the message, acting as correlationId
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'bookingId' field.
   * @return ID of the booking this notification is for
   */
  public java.lang.String getBookingId() {
    return bookingId;
  }


  /**
   * Sets the value of the 'bookingId' field.
   * ID of the booking this notification is for
   * @param value the value to set.
   */
  public void setBookingId(java.lang.String value) {
    this.bookingId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return ID of the customer
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * ID of the customer
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'customerEmail' field.
   * @return Email address for sending the notification
   */
  public java.lang.String getCustomerEmail() {
    return customerEmail;
  }


  /**
   * Sets the value of the 'customerEmail' field.
   * Email address for sending the notification
   * @param value the value to set.
   */
  public void setCustomerEmail(java.lang.String value) {
    this.customerEmail = value;
  }

  /**
   * Gets the value of the 'qrCode' field.
   * @return QR code data, can be null for requests
   */
  public java.lang.String getQrCode() {
    return qrCode;
  }


  /**
   * Sets the value of the 'qrCode' field.
   * QR code data, can be null for requests
   * @param value the value to set.
   */
  public void setQrCode(java.lang.String value) {
    this.qrCode = value;
  }

  /**
   * Gets the value of the 'notificationType' field.
   * @return Type of notification message
   */
  public com.poly.booking.management.domain.kafka.model.NotificationType getNotificationType() {
    return notificationType;
  }


  /**
   * Sets the value of the 'notificationType' field.
   * Type of notification message
   * @param value the value to set.
   */
  public void setNotificationType(com.poly.booking.management.domain.kafka.model.NotificationType value) {
    this.notificationType = value;
  }

  /**
   * Gets the value of the 'messageStatus' field.
   * @return Status of the message processing
   */
  public com.poly.booking.management.domain.kafka.model.MessageStatus getMessageStatus() {
    return messageStatus;
  }


  /**
   * Sets the value of the 'messageStatus' field.
   * Status of the message processing
   * @param value the value to set.
   */
  public void setMessageStatus(com.poly.booking.management.domain.kafka.model.MessageStatus value) {
    this.messageStatus = value;
  }

  /**
   * Creates a new NotificationMessageAvro RecordBuilder.
   * @return A new NotificationMessageAvro RecordBuilder
   */
  public static com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder newBuilder() {
    return new com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder();
  }

  /**
   * Creates a new NotificationMessageAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NotificationMessageAvro RecordBuilder
   */
  public static com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder newBuilder(com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder other) {
    if (other == null) {
      return new com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder();
    } else {
      return new com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder(other);
    }
  }

  /**
   * Creates a new NotificationMessageAvro RecordBuilder by copying an existing NotificationMessageAvro instance.
   * @param other The existing instance to copy.
   * @return A new NotificationMessageAvro RecordBuilder
   */
  public static com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder newBuilder(com.poly.booking.management.domain.kafka.model.NotificationMessageAvro other) {
    if (other == null) {
      return new com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder();
    } else {
      return new com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for NotificationMessageAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotificationMessageAvro>
    implements org.apache.avro.data.RecordBuilder<NotificationMessageAvro> {

    /** Unique ID for the message, acting as correlationId */
    private java.lang.String id;
    /** ID of the booking this notification is for */
    private java.lang.String bookingId;
    /** ID of the customer */
    private java.lang.String customerId;
    /** Email address for sending the notification */
    private java.lang.String customerEmail;
    /** QR code data, can be null for requests */
    private java.lang.String qrCode;
    /** Type of notification message */
    private com.poly.booking.management.domain.kafka.model.NotificationType notificationType;
    /** Status of the message processing */
    private com.poly.booking.management.domain.kafka.model.MessageStatus messageStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[1].schema(), other.bookingId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.customerEmail)) {
        this.customerEmail = data().deepCopy(fields()[3].schema(), other.customerEmail);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.qrCode)) {
        this.qrCode = data().deepCopy(fields()[4].schema(), other.qrCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.notificationType)) {
        this.notificationType = data().deepCopy(fields()[5].schema(), other.notificationType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.messageStatus)) {
        this.messageStatus = data().deepCopy(fields()[6].schema(), other.messageStatus);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing NotificationMessageAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.poly.booking.management.domain.kafka.model.NotificationMessageAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[1].schema(), other.bookingId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerId)) {
        this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.customerEmail)) {
        this.customerEmail = data().deepCopy(fields()[3].schema(), other.customerEmail);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.qrCode)) {
        this.qrCode = data().deepCopy(fields()[4].schema(), other.qrCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.notificationType)) {
        this.notificationType = data().deepCopy(fields()[5].schema(), other.notificationType);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.messageStatus)) {
        this.messageStatus = data().deepCopy(fields()[6].schema(), other.messageStatus);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Unique ID for the message, acting as correlationId
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Unique ID for the message, acting as correlationId
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Unique ID for the message, acting as correlationId
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Unique ID for the message, acting as correlationId
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingId' field.
      * ID of the booking this notification is for
      * @return The value.
      */
    public java.lang.String getBookingId() {
      return bookingId;
    }


    /**
      * Sets the value of the 'bookingId' field.
      * ID of the booking this notification is for
      * @param value The value of 'bookingId'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder setBookingId(java.lang.String value) {
      validate(fields()[1], value);
      this.bookingId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingId' field has been set.
      * ID of the booking this notification is for
      * @return True if the 'bookingId' field has been set, false otherwise.
      */
    public boolean hasBookingId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bookingId' field.
      * ID of the booking this notification is for
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder clearBookingId() {
      bookingId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * ID of the customer
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * ID of the customer
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder setCustomerId(java.lang.String value) {
      validate(fields()[2], value);
      this.customerId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * ID of the customer
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerId' field.
      * ID of the customer
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerEmail' field.
      * Email address for sending the notification
      * @return The value.
      */
    public java.lang.String getCustomerEmail() {
      return customerEmail;
    }


    /**
      * Sets the value of the 'customerEmail' field.
      * Email address for sending the notification
      * @param value The value of 'customerEmail'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder setCustomerEmail(java.lang.String value) {
      validate(fields()[3], value);
      this.customerEmail = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'customerEmail' field has been set.
      * Email address for sending the notification
      * @return True if the 'customerEmail' field has been set, false otherwise.
      */
    public boolean hasCustomerEmail() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'customerEmail' field.
      * Email address for sending the notification
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder clearCustomerEmail() {
      customerEmail = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'qrCode' field.
      * QR code data, can be null for requests
      * @return The value.
      */
    public java.lang.String getQrCode() {
      return qrCode;
    }


    /**
      * Sets the value of the 'qrCode' field.
      * QR code data, can be null for requests
      * @param value The value of 'qrCode'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder setQrCode(java.lang.String value) {
      validate(fields()[4], value);
      this.qrCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'qrCode' field has been set.
      * QR code data, can be null for requests
      * @return True if the 'qrCode' field has been set, false otherwise.
      */
    public boolean hasQrCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'qrCode' field.
      * QR code data, can be null for requests
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder clearQrCode() {
      qrCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'notificationType' field.
      * Type of notification message
      * @return The value.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationType getNotificationType() {
      return notificationType;
    }


    /**
      * Sets the value of the 'notificationType' field.
      * Type of notification message
      * @param value The value of 'notificationType'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder setNotificationType(com.poly.booking.management.domain.kafka.model.NotificationType value) {
      validate(fields()[5], value);
      this.notificationType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'notificationType' field has been set.
      * Type of notification message
      * @return True if the 'notificationType' field has been set, false otherwise.
      */
    public boolean hasNotificationType() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'notificationType' field.
      * Type of notification message
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder clearNotificationType() {
      notificationType = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'messageStatus' field.
      * Status of the message processing
      * @return The value.
      */
    public com.poly.booking.management.domain.kafka.model.MessageStatus getMessageStatus() {
      return messageStatus;
    }


    /**
      * Sets the value of the 'messageStatus' field.
      * Status of the message processing
      * @param value The value of 'messageStatus'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder setMessageStatus(com.poly.booking.management.domain.kafka.model.MessageStatus value) {
      validate(fields()[6], value);
      this.messageStatus = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'messageStatus' field has been set.
      * Status of the message processing
      * @return True if the 'messageStatus' field has been set, false otherwise.
      */
    public boolean hasMessageStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'messageStatus' field.
      * Status of the message processing
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.NotificationMessageAvro.Builder clearMessageStatus() {
      messageStatus = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NotificationMessageAvro build() {
      try {
        NotificationMessageAvro record = new NotificationMessageAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.bookingId = fieldSetFlags()[1] ? this.bookingId : (java.lang.String) defaultValue(fields()[1]);
        record.customerId = fieldSetFlags()[2] ? this.customerId : (java.lang.String) defaultValue(fields()[2]);
        record.customerEmail = fieldSetFlags()[3] ? this.customerEmail : (java.lang.String) defaultValue(fields()[3]);
        record.qrCode = fieldSetFlags()[4] ? this.qrCode : (java.lang.String) defaultValue(fields()[4]);
        record.notificationType = fieldSetFlags()[5] ? this.notificationType : (com.poly.booking.management.domain.kafka.model.NotificationType) defaultValue(fields()[5]);
        record.messageStatus = fieldSetFlags()[6] ? this.messageStatus : (com.poly.booking.management.domain.kafka.model.MessageStatus) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NotificationMessageAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<NotificationMessageAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NotificationMessageAvro>
    READER$ = (org.apache.avro.io.DatumReader<NotificationMessageAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.bookingId);

    if (this.customerId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.customerId);
    }

    if (this.customerEmail == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.customerEmail);
    }

    if (this.qrCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.qrCode);
    }

    out.writeEnum(this.notificationType.ordinal());

    out.writeEnum(this.messageStatus.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.bookingId = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.customerId = null;
      } else {
        this.customerId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.customerEmail = null;
      } else {
        this.customerEmail = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qrCode = null;
      } else {
        this.qrCode = in.readString();
      }

      this.notificationType = com.poly.booking.management.domain.kafka.model.NotificationType.values()[in.readEnum()];

      this.messageStatus = com.poly.booking.management.domain.kafka.model.MessageStatus.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.bookingId = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.customerId = null;
          } else {
            this.customerId = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.customerEmail = null;
          } else {
            this.customerEmail = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qrCode = null;
          } else {
            this.qrCode = in.readString();
          }
          break;

        case 5:
          this.notificationType = com.poly.booking.management.domain.kafka.model.NotificationType.values()[in.readEnum()];
          break;

        case 6:
          this.messageStatus = com.poly.booking.management.domain.kafka.model.MessageStatus.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










