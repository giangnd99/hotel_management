/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.poly.booking.management.domain.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BookingRoomResponseAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8078735170169849868L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BookingRoomResponseAvro\",\"namespace\":\"com.poly.booking.management.domain.kafka.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sagaId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bookingId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rooms\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Room\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"roomNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"basePrice\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}},{\"name\":\"totalPrice\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":20,\"scale\":2}},{\"name\":\"reason\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reservationStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<BookingRoomResponseAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BookingRoomResponseAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BookingRoomResponseAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BookingRoomResponseAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BookingRoomResponseAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BookingRoomResponseAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BookingRoomResponseAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BookingRoomResponseAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BookingRoomResponseAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String sagaId;
  private java.lang.String bookingId;
  private java.util.List<com.poly.booking.management.domain.kafka.model.Room> rooms;
  private java.math.BigDecimal totalPrice;
  private java.lang.String reason;
  private java.lang.String reservationStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BookingRoomResponseAvro() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param sagaId The new value for sagaId
   * @param bookingId The new value for bookingId
   * @param rooms The new value for rooms
   * @param totalPrice The new value for totalPrice
   * @param reason The new value for reason
   * @param reservationStatus The new value for reservationStatus
   */
  public BookingRoomResponseAvro(java.lang.String id, java.lang.String sagaId, java.lang.String bookingId, java.util.List<com.poly.booking.management.domain.kafka.model.Room> rooms, java.math.BigDecimal totalPrice, java.lang.String reason, java.lang.String reservationStatus) {
    this.id = id;
    this.sagaId = sagaId;
    this.bookingId = bookingId;
    this.rooms = rooms;
    this.totalPrice = totalPrice;
    this.reason = reason;
    this.reservationStatus = reservationStatus;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sagaId;
    case 2: return bookingId;
    case 3: return rooms;
    case 4: return totalPrice;
    case 5: return reason;
    case 6: return reservationStatus;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: sagaId = value$ != null ? value$.toString() : null; break;
    case 2: bookingId = value$ != null ? value$.toString() : null; break;
    case 3: rooms = (java.util.List<com.poly.booking.management.domain.kafka.model.Room>)value$; break;
    case 4: totalPrice = (java.math.BigDecimal)value$; break;
    case 5: reason = value$ != null ? value$.toString() : null; break;
    case 6: reservationStatus = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public java.lang.String getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(java.lang.String value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'bookingId' field.
   * @return The value of the 'bookingId' field.
   */
  public java.lang.String getBookingId() {
    return bookingId;
  }


  /**
   * Sets the value of the 'bookingId' field.
   * @param value the value to set.
   */
  public void setBookingId(java.lang.String value) {
    this.bookingId = value;
  }

  /**
   * Gets the value of the 'rooms' field.
   * @return The value of the 'rooms' field.
   */
  public java.util.List<com.poly.booking.management.domain.kafka.model.Room> getRooms() {
    return rooms;
  }


  /**
   * Sets the value of the 'rooms' field.
   * @param value the value to set.
   */
  public void setRooms(java.util.List<com.poly.booking.management.domain.kafka.model.Room> value) {
    this.rooms = value;
  }

  /**
   * Gets the value of the 'totalPrice' field.
   * @return The value of the 'totalPrice' field.
   */
  public java.math.BigDecimal getTotalPrice() {
    return totalPrice;
  }


  /**
   * Sets the value of the 'totalPrice' field.
   * @param value the value to set.
   */
  public void setTotalPrice(java.math.BigDecimal value) {
    this.totalPrice = value;
  }

  /**
   * Gets the value of the 'reason' field.
   * @return The value of the 'reason' field.
   */
  public java.lang.String getReason() {
    return reason;
  }


  /**
   * Sets the value of the 'reason' field.
   * @param value the value to set.
   */
  public void setReason(java.lang.String value) {
    this.reason = value;
  }

  /**
   * Gets the value of the 'reservationStatus' field.
   * @return The value of the 'reservationStatus' field.
   */
  public java.lang.String getReservationStatus() {
    return reservationStatus;
  }


  /**
   * Sets the value of the 'reservationStatus' field.
   * @param value the value to set.
   */
  public void setReservationStatus(java.lang.String value) {
    this.reservationStatus = value;
  }

  /**
   * Creates a new BookingRoomResponseAvro RecordBuilder.
   * @return A new BookingRoomResponseAvro RecordBuilder
   */
  public static com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder newBuilder() {
    return new com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder();
  }

  /**
   * Creates a new BookingRoomResponseAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BookingRoomResponseAvro RecordBuilder
   */
  public static com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder newBuilder(com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder other) {
    if (other == null) {
      return new com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder();
    } else {
      return new com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder(other);
    }
  }

  /**
   * Creates a new BookingRoomResponseAvro RecordBuilder by copying an existing BookingRoomResponseAvro instance.
   * @param other The existing instance to copy.
   * @return A new BookingRoomResponseAvro RecordBuilder
   */
  public static com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder newBuilder(com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro other) {
    if (other == null) {
      return new com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder();
    } else {
      return new com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for BookingRoomResponseAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BookingRoomResponseAvro>
    implements org.apache.avro.data.RecordBuilder<BookingRoomResponseAvro> {

    private java.lang.String id;
    private java.lang.String sagaId;
    private java.lang.String bookingId;
    private java.util.List<com.poly.booking.management.domain.kafka.model.Room> rooms;
    private java.math.BigDecimal totalPrice;
    private java.lang.String reason;
    private java.lang.String reservationStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[2].schema(), other.bookingId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.rooms)) {
        this.rooms = data().deepCopy(fields()[3].schema(), other.rooms);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[4].schema(), other.totalPrice);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.reason)) {
        this.reason = data().deepCopy(fields()[5].schema(), other.reason);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.reservationStatus)) {
        this.reservationStatus = data().deepCopy(fields()[6].schema(), other.reservationStatus);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing BookingRoomResponseAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bookingId)) {
        this.bookingId = data().deepCopy(fields()[2].schema(), other.bookingId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rooms)) {
        this.rooms = data().deepCopy(fields()[3].schema(), other.rooms);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[4].schema(), other.totalPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.reason)) {
        this.reason = data().deepCopy(fields()[5].schema(), other.reason);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.reservationStatus)) {
        this.reservationStatus = data().deepCopy(fields()[6].schema(), other.reservationStatus);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public java.lang.String getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder setSagaId(java.lang.String value) {
      validate(fields()[1], value);
      this.sagaId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bookingId' field.
      * @return The value.
      */
    public java.lang.String getBookingId() {
      return bookingId;
    }


    /**
      * Sets the value of the 'bookingId' field.
      * @param value The value of 'bookingId'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder setBookingId(java.lang.String value) {
      validate(fields()[2], value);
      this.bookingId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bookingId' field has been set.
      * @return True if the 'bookingId' field has been set, false otherwise.
      */
    public boolean hasBookingId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bookingId' field.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder clearBookingId() {
      bookingId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'rooms' field.
      * @return The value.
      */
    public java.util.List<com.poly.booking.management.domain.kafka.model.Room> getRooms() {
      return rooms;
    }


    /**
      * Sets the value of the 'rooms' field.
      * @param value The value of 'rooms'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder setRooms(java.util.List<com.poly.booking.management.domain.kafka.model.Room> value) {
      validate(fields()[3], value);
      this.rooms = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'rooms' field has been set.
      * @return True if the 'rooms' field has been set, false otherwise.
      */
    public boolean hasRooms() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'rooms' field.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder clearRooms() {
      rooms = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPrice' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalPrice() {
      return totalPrice;
    }


    /**
      * Sets the value of the 'totalPrice' field.
      * @param value The value of 'totalPrice'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder setTotalPrice(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.totalPrice = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPrice' field has been set.
      * @return True if the 'totalPrice' field has been set, false otherwise.
      */
    public boolean hasTotalPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalPrice' field.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder clearTotalPrice() {
      totalPrice = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'reason' field.
      * @return The value.
      */
    public java.lang.String getReason() {
      return reason;
    }


    /**
      * Sets the value of the 'reason' field.
      * @param value The value of 'reason'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder setReason(java.lang.String value) {
      validate(fields()[5], value);
      this.reason = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'reason' field has been set.
      * @return True if the 'reason' field has been set, false otherwise.
      */
    public boolean hasReason() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'reason' field.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder clearReason() {
      reason = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'reservationStatus' field.
      * @return The value.
      */
    public java.lang.String getReservationStatus() {
      return reservationStatus;
    }


    /**
      * Sets the value of the 'reservationStatus' field.
      * @param value The value of 'reservationStatus'.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder setReservationStatus(java.lang.String value) {
      validate(fields()[6], value);
      this.reservationStatus = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'reservationStatus' field has been set.
      * @return True if the 'reservationStatus' field has been set, false otherwise.
      */
    public boolean hasReservationStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'reservationStatus' field.
      * @return This builder.
      */
    public com.poly.booking.management.domain.kafka.model.BookingRoomResponseAvro.Builder clearReservationStatus() {
      reservationStatus = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BookingRoomResponseAvro build() {
      try {
        BookingRoomResponseAvro record = new BookingRoomResponseAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.sagaId = fieldSetFlags()[1] ? this.sagaId : (java.lang.String) defaultValue(fields()[1]);
        record.bookingId = fieldSetFlags()[2] ? this.bookingId : (java.lang.String) defaultValue(fields()[2]);
        record.rooms = fieldSetFlags()[3] ? this.rooms : (java.util.List<com.poly.booking.management.domain.kafka.model.Room>) defaultValue(fields()[3]);
        record.totalPrice = fieldSetFlags()[4] ? this.totalPrice : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.reason = fieldSetFlags()[5] ? this.reason : (java.lang.String) defaultValue(fields()[5]);
        record.reservationStatus = fieldSetFlags()[6] ? this.reservationStatus : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BookingRoomResponseAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<BookingRoomResponseAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BookingRoomResponseAvro>
    READER$ = (org.apache.avro.io.DatumReader<BookingRoomResponseAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










