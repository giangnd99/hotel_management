server:
  port: 8082

spring:
  application:
    name: restaurant-service
  eureka:
    client:
      service-url:
        defaultZone: http://localhost:8761/eureka/
      register-with-eureka: true
      fetch-registry: true
    instance:
      prefer-ip-address: true
  datasource:
    url: jdbc:postgresql://localhost:5433/postgres?currentSchema=restaurant_test&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified
    username: postgres
    password: admin
    driver-class-name: org.postgresql.Driver
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  sql:
    init:
      platform: postgres
      mode: ALWAYS
      schema-locations: classpath:init-schema.sql

# Kafka Configuration for Test
kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

# Kafka Topics Configuration for Test
kafka:
  topic:
    payment-request: restaurant-payment-request-test
    payment-response: restaurant-payment-response-test
    room-order-request: restaurant-room-order-request-test
    room-order-response: restaurant-room-order-response-test
  group-id: restaurant-service-group-test

# Service URLs for Test
payment:
  service:
    url: http://localhost:8092

customer:
  service:
    url: http://localhost:8093

notification:
  service:
    url: http://localhost:8091

room:
  service:
    url: http://localhost:8087

# OpenAPI Configuration
openapi:
  service:
    api-docs: restaurant-service-docs
    title: Restaurant Service API
    version: 1.0.0
    server: http://localhost:8082

# Logging configuration for Test
logging:
  level:
    com.poly.restaurant: INFO
    org.hibernate.SQL: INFO
    org.springframework.kafka: INFO
